// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tuna.proto

#include "tuna.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
constexpr ConnectionMetadata::ConnectionMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encryption_algo_(0)
{}
struct ConnectionMetadataDefaultTypeInternal {
  constexpr ConnectionMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionMetadataDefaultTypeInternal() {}
  union {
    ConnectionMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionMetadataDefaultTypeInternal _ConnectionMetadata_default_instance_;
constexpr ServiceMetadata::ServiceMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_tcp_()
  , _service_tcp_cached_byte_size_(0)
  , service_udp_()
  , _service_udp_cached_byte_size_(0)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , beneficiary_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tcp_port_(0u)
  , udp_port_(0u)
  , service_id_(0u){}
struct ServiceMetadataDefaultTypeInternal {
  constexpr ServiceMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceMetadataDefaultTypeInternal() {}
  union {
    ServiceMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceMetadataDefaultTypeInternal _ServiceMetadata_default_instance_;
constexpr StreamMetadata::StreamMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_id_(0u)
  , port_id_(0u)
  , is_payment_(false){}
struct StreamMetadataDefaultTypeInternal {
  constexpr StreamMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMetadataDefaultTypeInternal() {}
  union {
    StreamMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMetadataDefaultTypeInternal _StreamMetadata_default_instance_;
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tuna_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tuna_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tuna_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tuna_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ConnectionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ConnectionMetadata, encryption_algo_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnectionMetadata, public_key_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnectionMetadata, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ServiceMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ServiceMetadata, ip_),
  PROTOBUF_FIELD_OFFSET(::pb::ServiceMetadata, tcp_port_),
  PROTOBUF_FIELD_OFFSET(::pb::ServiceMetadata, udp_port_),
  PROTOBUF_FIELD_OFFSET(::pb::ServiceMetadata, service_id_),
  PROTOBUF_FIELD_OFFSET(::pb::ServiceMetadata, service_tcp_),
  PROTOBUF_FIELD_OFFSET(::pb::ServiceMetadata, service_udp_),
  PROTOBUF_FIELD_OFFSET(::pb::ServiceMetadata, price_),
  PROTOBUF_FIELD_OFFSET(::pb::ServiceMetadata, beneficiary_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::StreamMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::StreamMetadata, service_id_),
  PROTOBUF_FIELD_OFFSET(::pb::StreamMetadata, port_id_),
  PROTOBUF_FIELD_OFFSET(::pb::StreamMetadata, is_payment_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::ConnectionMetadata)},
  { 8, -1, sizeof(::pb::ServiceMetadata)},
  { 21, -1, sizeof(::pb::StreamMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ConnectionMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ServiceMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_StreamMetadata_default_instance_),
};

const char descriptor_table_protodef_tuna_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntuna.proto\022\002pb\"d\n\022ConnectionMetadata\022+"
  "\n\017encryption_algo\030\001 \001(\0162\022.pb.EncryptionA"
  "lgo\022\022\n\npublic_key\030\002 \001(\014\022\r\n\005nonce\030\003 \001(\014\"\250"
  "\001\n\017ServiceMetadata\022\n\n\002ip\030\001 \001(\t\022\020\n\010tcp_po"
  "rt\030\002 \001(\r\022\020\n\010udp_port\030\003 \001(\r\022\022\n\nservice_id"
  "\030\004 \001(\r\022\023\n\013service_tcp\030\005 \003(\r\022\023\n\013service_u"
  "dp\030\006 \003(\r\022\r\n\005price\030\007 \001(\t\022\030\n\020beneficiary_a"
  "ddr\030\010 \001(\t\"I\n\016StreamMetadata\022\022\n\nservice_i"
  "d\030\001 \001(\r\022\017\n\007port_id\030\002 \001(\r\022\022\n\nis_payment\030\003"
  " \001(\010*_\n\016EncryptionAlgo\022\023\n\017ENCRYPTION_NON"
  "E\020\000\022 \n\034ENCRYPTION_XSALSA20_POLY1305\020\001\022\026\n"
  "\022ENCRYPTION_AES_GCM\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tuna_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tuna_2eproto = {
  false, false, 469, descriptor_table_protodef_tuna_2eproto, "tuna.proto", 
  &descriptor_table_tuna_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_tuna_2eproto::offsets,
  file_level_metadata_tuna_2eproto, file_level_enum_descriptors_tuna_2eproto, file_level_service_descriptors_tuna_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tuna_2eproto_getter() {
  return &descriptor_table_tuna_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tuna_2eproto(&descriptor_table_tuna_2eproto);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionAlgo_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tuna_2eproto);
  return file_level_enum_descriptors_tuna_2eproto[0];
}
bool EncryptionAlgo_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ConnectionMetadata::_Internal {
 public:
};

ConnectionMetadata::ConnectionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.ConnectionMetadata)
}
ConnectionMetadata::ConnectionMetadata(const ConnectionMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArenaForAllocation());
  }
  encryption_algo_ = from.encryption_algo_;
  // @@protoc_insertion_point(copy_constructor:pb.ConnectionMetadata)
}

inline void ConnectionMetadata::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
encryption_algo_ = 0;
}

ConnectionMetadata::~ConnectionMetadata() {
  // @@protoc_insertion_point(destructor:pb.ConnectionMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionMetadata::ArenaDtor(void* object) {
  ConnectionMetadata* _this = reinterpret_cast< ConnectionMetadata* >(object);
  (void)_this;
}
void ConnectionMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ConnectionMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  nonce_.ClearToEmpty();
  encryption_algo_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.EncryptionAlgo encryption_algo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption_algo(static_cast<::pb::EncryptionAlgo>(val));
        } else goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ConnectionMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.EncryptionAlgo encryption_algo = 1;
  if (this->_internal_encryption_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encryption_algo(), target);
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  // bytes nonce = 3;
  if (!this->_internal_nonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ConnectionMetadata)
  return target;
}

size_t ConnectionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ConnectionMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes nonce = 3;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // .pb.EncryptionAlgo encryption_algo = 1;
  if (this->_internal_encryption_algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encryption_algo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionMetadata::GetClassData() const { return &_class_data_; }

void ConnectionMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConnectionMetadata *>(to)->MergeFrom(
      static_cast<const ConnectionMetadata &>(from));
}


void ConnectionMetadata::MergeFrom(const ConnectionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ConnectionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_encryption_algo() != 0) {
    _internal_set_encryption_algo(from._internal_encryption_algo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionMetadata::CopyFrom(const ConnectionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ConnectionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionMetadata::IsInitialized() const {
  return true;
}

void ConnectionMetadata::InternalSwap(ConnectionMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_, GetArenaForAllocation(),
      &other->nonce_, other->GetArenaForAllocation()
  );
  swap(encryption_algo_, other->encryption_algo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tuna_2eproto_getter, &descriptor_table_tuna_2eproto_once,
      file_level_metadata_tuna_2eproto[0]);
}

// ===================================================================

class ServiceMetadata::_Internal {
 public:
};

ServiceMetadata::ServiceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  service_tcp_(arena),
  service_udp_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.ServiceMetadata)
}
ServiceMetadata::ServiceMetadata(const ServiceMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      service_tcp_(from.service_tcp_),
      service_udp_(from.service_udp_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price().empty()) {
    price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_price(), 
      GetArenaForAllocation());
  }
  beneficiary_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_beneficiary_addr().empty()) {
    beneficiary_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_beneficiary_addr(), 
      GetArenaForAllocation());
  }
  ::memcpy(&tcp_port_, &from.tcp_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&tcp_port_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:pb.ServiceMetadata)
}

inline void ServiceMetadata::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
beneficiary_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tcp_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&tcp_port_)) + sizeof(service_id_));
}

ServiceMetadata::~ServiceMetadata() {
  // @@protoc_insertion_point(destructor:pb.ServiceMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  beneficiary_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceMetadata::ArenaDtor(void* object) {
  ServiceMetadata* _this = reinterpret_cast< ServiceMetadata* >(object);
  (void)_this;
}
void ServiceMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ServiceMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_tcp_.Clear();
  service_udp_.Clear();
  ip_.ClearToEmpty();
  price_.ClearToEmpty();
  beneficiary_addr_.ClearToEmpty();
  ::memset(&tcp_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&tcp_port_)) + sizeof(service_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.ServiceMetadata.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcp_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tcp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 udp_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          udp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 service_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 service_tcp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_service_tcp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_service_tcp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 service_udp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_service_udp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_service_udp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.ServiceMetadata.price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string beneficiary_addr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_beneficiary_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.ServiceMetadata.beneficiary_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ServiceMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ServiceMetadata.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 tcp_port = 2;
  if (this->_internal_tcp_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tcp_port(), target);
  }

  // uint32 udp_port = 3;
  if (this->_internal_udp_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_udp_port(), target);
  }

  // uint32 service_id = 4;
  if (this->_internal_service_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_service_id(), target);
  }

  // repeated uint32 service_tcp = 5;
  {
    int byte_size = _service_tcp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_service_tcp(), byte_size, target);
    }
  }

  // repeated uint32 service_udp = 6;
  {
    int byte_size = _service_udp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_service_udp(), byte_size, target);
    }
  }

  // string price = 7;
  if (!this->_internal_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ServiceMetadata.price");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_price(), target);
  }

  // string beneficiary_addr = 8;
  if (!this->_internal_beneficiary_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_beneficiary_addr().data(), static_cast<int>(this->_internal_beneficiary_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ServiceMetadata.beneficiary_addr");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_beneficiary_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ServiceMetadata)
  return target;
}

size_t ServiceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ServiceMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 service_tcp = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->service_tcp_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _service_tcp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 service_udp = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->service_udp_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _service_udp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string price = 7;
  if (!this->_internal_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  // string beneficiary_addr = 8;
  if (!this->_internal_beneficiary_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_beneficiary_addr());
  }

  // uint32 tcp_port = 2;
  if (this->_internal_tcp_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcp_port());
  }

  // uint32 udp_port = 3;
  if (this->_internal_udp_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_udp_port());
  }

  // uint32 service_id = 4;
  if (this->_internal_service_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceMetadata::GetClassData() const { return &_class_data_; }

void ServiceMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServiceMetadata *>(to)->MergeFrom(
      static_cast<const ServiceMetadata &>(from));
}


void ServiceMetadata::MergeFrom(const ServiceMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ServiceMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_tcp_.MergeFrom(from.service_tcp_);
  service_udp_.MergeFrom(from.service_udp_);
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_price().empty()) {
    _internal_set_price(from._internal_price());
  }
  if (!from._internal_beneficiary_addr().empty()) {
    _internal_set_beneficiary_addr(from._internal_beneficiary_addr());
  }
  if (from._internal_tcp_port() != 0) {
    _internal_set_tcp_port(from._internal_tcp_port());
  }
  if (from._internal_udp_port() != 0) {
    _internal_set_udp_port(from._internal_udp_port());
  }
  if (from._internal_service_id() != 0) {
    _internal_set_service_id(from._internal_service_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceMetadata::CopyFrom(const ServiceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ServiceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMetadata::IsInitialized() const {
  return true;
}

void ServiceMetadata::InternalSwap(ServiceMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  service_tcp_.InternalSwap(&other->service_tcp_);
  service_udp_.InternalSwap(&other->service_udp_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &price_, GetArenaForAllocation(),
      &other->price_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &beneficiary_addr_, GetArenaForAllocation(),
      &other->beneficiary_addr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceMetadata, service_id_)
      + sizeof(ServiceMetadata::service_id_)
      - PROTOBUF_FIELD_OFFSET(ServiceMetadata, tcp_port_)>(
          reinterpret_cast<char*>(&tcp_port_),
          reinterpret_cast<char*>(&other->tcp_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tuna_2eproto_getter, &descriptor_table_tuna_2eproto_once,
      file_level_metadata_tuna_2eproto[1]);
}

// ===================================================================

class StreamMetadata::_Internal {
 public:
};

StreamMetadata::StreamMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.StreamMetadata)
}
StreamMetadata::StreamMetadata(const StreamMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&service_id_, &from.service_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_payment_) -
    reinterpret_cast<char*>(&service_id_)) + sizeof(is_payment_));
  // @@protoc_insertion_point(copy_constructor:pb.StreamMetadata)
}

inline void StreamMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_payment_) -
    reinterpret_cast<char*>(&service_id_)) + sizeof(is_payment_));
}

StreamMetadata::~StreamMetadata() {
  // @@protoc_insertion_point(destructor:pb.StreamMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamMetadata::ArenaDtor(void* object) {
  StreamMetadata* _this = reinterpret_cast< StreamMetadata* >(object);
  (void)_this;
}
void StreamMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.StreamMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&service_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_payment_) -
      reinterpret_cast<char*>(&service_id_)) + sizeof(is_payment_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_payment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_payment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StreamMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 service_id = 1;
  if (this->_internal_service_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_service_id(), target);
  }

  // uint32 port_id = 2;
  if (this->_internal_port_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port_id(), target);
  }

  // bool is_payment = 3;
  if (this->_internal_is_payment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_payment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StreamMetadata)
  return target;
}

size_t StreamMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.StreamMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 service_id = 1;
  if (this->_internal_service_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_id());
  }

  // uint32 port_id = 2;
  if (this->_internal_port_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port_id());
  }

  // bool is_payment = 3;
  if (this->_internal_is_payment() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMetadata::GetClassData() const { return &_class_data_; }

void StreamMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StreamMetadata *>(to)->MergeFrom(
      static_cast<const StreamMetadata &>(from));
}


void StreamMetadata::MergeFrom(const StreamMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.StreamMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_service_id() != 0) {
    _internal_set_service_id(from._internal_service_id());
  }
  if (from._internal_port_id() != 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  if (from._internal_is_payment() != 0) {
    _internal_set_is_payment(from._internal_is_payment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMetadata::CopyFrom(const StreamMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.StreamMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMetadata::IsInitialized() const {
  return true;
}

void StreamMetadata::InternalSwap(StreamMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamMetadata, is_payment_)
      + sizeof(StreamMetadata::is_payment_)
      - PROTOBUF_FIELD_OFFSET(StreamMetadata, service_id_)>(
          reinterpret_cast<char*>(&service_id_),
          reinterpret_cast<char*>(&other->service_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tuna_2eproto_getter, &descriptor_table_tuna_2eproto_once,
      file_level_metadata_tuna_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ConnectionMetadata* Arena::CreateMaybeMessage< ::pb::ConnectionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ConnectionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ServiceMetadata* Arena::CreateMaybeMessage< ::pb::ServiceMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ServiceMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::StreamMetadata* Arena::CreateMaybeMessage< ::pb::StreamMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::StreamMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
