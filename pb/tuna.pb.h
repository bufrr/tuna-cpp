// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tuna.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tuna_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tuna_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tuna_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tuna_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tuna_2eproto;
namespace pb {
class ConnectionMetadata;
struct ConnectionMetadataDefaultTypeInternal;
extern ConnectionMetadataDefaultTypeInternal _ConnectionMetadata_default_instance_;
class ServiceMetadata;
struct ServiceMetadataDefaultTypeInternal;
extern ServiceMetadataDefaultTypeInternal _ServiceMetadata_default_instance_;
class StreamMetadata;
struct StreamMetadataDefaultTypeInternal;
extern StreamMetadataDefaultTypeInternal _StreamMetadata_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ConnectionMetadata* Arena::CreateMaybeMessage<::pb::ConnectionMetadata>(Arena*);
template<> ::pb::ServiceMetadata* Arena::CreateMaybeMessage<::pb::ServiceMetadata>(Arena*);
template<> ::pb::StreamMetadata* Arena::CreateMaybeMessage<::pb::StreamMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum EncryptionAlgo : int {
  ENCRYPTION_NONE = 0,
  ENCRYPTION_XSALSA20_POLY1305 = 1,
  ENCRYPTION_AES_GCM = 2,
  EncryptionAlgo_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EncryptionAlgo_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EncryptionAlgo_IsValid(int value);
constexpr EncryptionAlgo EncryptionAlgo_MIN = ENCRYPTION_NONE;
constexpr EncryptionAlgo EncryptionAlgo_MAX = ENCRYPTION_AES_GCM;
constexpr int EncryptionAlgo_ARRAYSIZE = EncryptionAlgo_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionAlgo_descriptor();
template<typename T>
inline const std::string& EncryptionAlgo_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EncryptionAlgo>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EncryptionAlgo_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EncryptionAlgo_descriptor(), enum_t_value);
}
inline bool EncryptionAlgo_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncryptionAlgo* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EncryptionAlgo>(
    EncryptionAlgo_descriptor(), name, value);
}
// ===================================================================

class ConnectionMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ConnectionMetadata) */ {
 public:
  inline ConnectionMetadata() : ConnectionMetadata(nullptr) {}
  ~ConnectionMetadata() override;
  explicit constexpr ConnectionMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionMetadata(const ConnectionMetadata& from);
  ConnectionMetadata(ConnectionMetadata&& from) noexcept
    : ConnectionMetadata() {
    *this = ::std::move(from);
  }

  inline ConnectionMetadata& operator=(const ConnectionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionMetadata& operator=(ConnectionMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionMetadata* internal_default_instance() {
    return reinterpret_cast<const ConnectionMetadata*>(
               &_ConnectionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionMetadata& a, ConnectionMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionMetadata* New() const final {
    return new ConnectionMetadata();
  }

  ConnectionMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectionMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ConnectionMetadata";
  }
  protected:
  explicit ConnectionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 2,
    kNonceFieldNumber = 3,
    kEncryptionAlgoFieldNumber = 1,
  };
  // bytes public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes nonce = 3;
  void clear_nonce();
  const std::string& nonce() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce();
  PROTOBUF_MUST_USE_RESULT std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // .pb.EncryptionAlgo encryption_algo = 1;
  void clear_encryption_algo();
  ::pb::EncryptionAlgo encryption_algo() const;
  void set_encryption_algo(::pb::EncryptionAlgo value);
  private:
  ::pb::EncryptionAlgo _internal_encryption_algo() const;
  void _internal_set_encryption_algo(::pb::EncryptionAlgo value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ConnectionMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  int encryption_algo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tuna_2eproto;
};
// -------------------------------------------------------------------

class ServiceMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ServiceMetadata) */ {
 public:
  inline ServiceMetadata() : ServiceMetadata(nullptr) {}
  ~ServiceMetadata() override;
  explicit constexpr ServiceMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceMetadata(const ServiceMetadata& from);
  ServiceMetadata(ServiceMetadata&& from) noexcept
    : ServiceMetadata() {
    *this = ::std::move(from);
  }

  inline ServiceMetadata& operator=(const ServiceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMetadata& operator=(ServiceMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceMetadata* internal_default_instance() {
    return reinterpret_cast<const ServiceMetadata*>(
               &_ServiceMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceMetadata& a, ServiceMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceMetadata* New() const final {
    return new ServiceMetadata();
  }

  ServiceMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ServiceMetadata";
  }
  protected:
  explicit ServiceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceTcpFieldNumber = 5,
    kServiceUdpFieldNumber = 6,
    kIpFieldNumber = 1,
    kPriceFieldNumber = 7,
    kBeneficiaryAddrFieldNumber = 8,
    kTcpPortFieldNumber = 2,
    kUdpPortFieldNumber = 3,
    kServiceIdFieldNumber = 4,
  };
  // repeated uint32 service_tcp = 5;
  int service_tcp_size() const;
  private:
  int _internal_service_tcp_size() const;
  public:
  void clear_service_tcp();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_tcp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_service_tcp() const;
  void _internal_add_service_tcp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_service_tcp();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 service_tcp(int index) const;
  void set_service_tcp(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_service_tcp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      service_tcp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_service_tcp();

  // repeated uint32 service_udp = 6;
  int service_udp_size() const;
  private:
  int _internal_service_udp_size() const;
  public:
  void clear_service_udp();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_udp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_service_udp() const;
  void _internal_add_service_udp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_service_udp();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 service_udp(int index) const;
  void set_service_udp(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_service_udp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      service_udp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_service_udp();

  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string price = 7;
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_MUST_USE_RESULT std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // string beneficiary_addr = 8;
  void clear_beneficiary_addr();
  const std::string& beneficiary_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_beneficiary_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_beneficiary_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_beneficiary_addr();
  void set_allocated_beneficiary_addr(std::string* beneficiary_addr);
  private:
  const std::string& _internal_beneficiary_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_beneficiary_addr(const std::string& value);
  std::string* _internal_mutable_beneficiary_addr();
  public:

  // uint32 tcp_port = 2;
  void clear_tcp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcp_port() const;
  void set_tcp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcp_port() const;
  void _internal_set_tcp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 udp_port = 3;
  void clear_udp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 udp_port() const;
  void set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udp_port() const;
  void _internal_set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 service_id = 4;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ServiceMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > service_tcp_;
  mutable std::atomic<int> _service_tcp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > service_udp_;
  mutable std::atomic<int> _service_udp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr beneficiary_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcp_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udp_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tuna_2eproto;
};
// -------------------------------------------------------------------

class StreamMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.StreamMetadata) */ {
 public:
  inline StreamMetadata() : StreamMetadata(nullptr) {}
  ~StreamMetadata() override;
  explicit constexpr StreamMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMetadata(const StreamMetadata& from);
  StreamMetadata(StreamMetadata&& from) noexcept
    : StreamMetadata() {
    *this = ::std::move(from);
  }

  inline StreamMetadata& operator=(const StreamMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMetadata& operator=(StreamMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMetadata* internal_default_instance() {
    return reinterpret_cast<const StreamMetadata*>(
               &_StreamMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamMetadata& a, StreamMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMetadata* New() const final {
    return new StreamMetadata();
  }

  StreamMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.StreamMetadata";
  }
  protected:
  explicit StreamMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdFieldNumber = 1,
    kPortIdFieldNumber = 2,
    kIsPaymentFieldNumber = 3,
  };
  // uint32 service_id = 1;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port_id = 2;
  void clear_port_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_id() const;
  void set_port_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_id() const;
  void _internal_set_port_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_payment = 3;
  void clear_is_payment();
  bool is_payment() const;
  void set_is_payment(bool value);
  private:
  bool _internal_is_payment() const;
  void _internal_set_is_payment(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.StreamMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_id_;
  bool is_payment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tuna_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionMetadata

// .pb.EncryptionAlgo encryption_algo = 1;
inline void ConnectionMetadata::clear_encryption_algo() {
  encryption_algo_ = 0;
}
inline ::pb::EncryptionAlgo ConnectionMetadata::_internal_encryption_algo() const {
  return static_cast< ::pb::EncryptionAlgo >(encryption_algo_);
}
inline ::pb::EncryptionAlgo ConnectionMetadata::encryption_algo() const {
  // @@protoc_insertion_point(field_get:pb.ConnectionMetadata.encryption_algo)
  return _internal_encryption_algo();
}
inline void ConnectionMetadata::_internal_set_encryption_algo(::pb::EncryptionAlgo value) {
  
  encryption_algo_ = value;
}
inline void ConnectionMetadata::set_encryption_algo(::pb::EncryptionAlgo value) {
  _internal_set_encryption_algo(value);
  // @@protoc_insertion_point(field_set:pb.ConnectionMetadata.encryption_algo)
}

// bytes public_key = 2;
inline void ConnectionMetadata::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& ConnectionMetadata::public_key() const {
  // @@protoc_insertion_point(field_get:pb.ConnectionMetadata.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectionMetadata::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.ConnectionMetadata.public_key)
}
inline std::string* ConnectionMetadata::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:pb.ConnectionMetadata.public_key)
  return _s;
}
inline const std::string& ConnectionMetadata::_internal_public_key() const {
  return public_key_.Get();
}
inline void ConnectionMetadata::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectionMetadata::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectionMetadata::release_public_key() {
  // @@protoc_insertion_point(field_release:pb.ConnectionMetadata.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConnectionMetadata::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.ConnectionMetadata.public_key)
}

// bytes nonce = 3;
inline void ConnectionMetadata::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& ConnectionMetadata::nonce() const {
  // @@protoc_insertion_point(field_get:pb.ConnectionMetadata.nonce)
  return _internal_nonce();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectionMetadata::set_nonce(ArgT0&& arg0, ArgT... args) {
 
 nonce_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.ConnectionMetadata.nonce)
}
inline std::string* ConnectionMetadata::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:pb.ConnectionMetadata.nonce)
  return _s;
}
inline const std::string& ConnectionMetadata::_internal_nonce() const {
  return nonce_.Get();
}
inline void ConnectionMetadata::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectionMetadata::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectionMetadata::release_nonce() {
  // @@protoc_insertion_point(field_release:pb.ConnectionMetadata.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConnectionMetadata::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.ConnectionMetadata.nonce)
}

// -------------------------------------------------------------------

// ServiceMetadata

// string ip = 1;
inline void ServiceMetadata::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& ServiceMetadata::ip() const {
  // @@protoc_insertion_point(field_get:pb.ServiceMetadata.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceMetadata::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.ServiceMetadata.ip)
}
inline std::string* ServiceMetadata::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:pb.ServiceMetadata.ip)
  return _s;
}
inline const std::string& ServiceMetadata::_internal_ip() const {
  return ip_.Get();
}
inline void ServiceMetadata::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceMetadata::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceMetadata::release_ip() {
  // @@protoc_insertion_point(field_release:pb.ServiceMetadata.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceMetadata::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.ServiceMetadata.ip)
}

// uint32 tcp_port = 2;
inline void ServiceMetadata::clear_tcp_port() {
  tcp_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::_internal_tcp_port() const {
  return tcp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::tcp_port() const {
  // @@protoc_insertion_point(field_get:pb.ServiceMetadata.tcp_port)
  return _internal_tcp_port();
}
inline void ServiceMetadata::_internal_set_tcp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcp_port_ = value;
}
inline void ServiceMetadata::set_tcp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcp_port(value);
  // @@protoc_insertion_point(field_set:pb.ServiceMetadata.tcp_port)
}

// uint32 udp_port = 3;
inline void ServiceMetadata::clear_udp_port() {
  udp_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::_internal_udp_port() const {
  return udp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::udp_port() const {
  // @@protoc_insertion_point(field_get:pb.ServiceMetadata.udp_port)
  return _internal_udp_port();
}
inline void ServiceMetadata::_internal_set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  udp_port_ = value;
}
inline void ServiceMetadata::set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udp_port(value);
  // @@protoc_insertion_point(field_set:pb.ServiceMetadata.udp_port)
}

// uint32 service_id = 4;
inline void ServiceMetadata::clear_service_id() {
  service_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::service_id() const {
  // @@protoc_insertion_point(field_get:pb.ServiceMetadata.service_id)
  return _internal_service_id();
}
inline void ServiceMetadata::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  service_id_ = value;
}
inline void ServiceMetadata::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:pb.ServiceMetadata.service_id)
}

// repeated uint32 service_tcp = 5;
inline int ServiceMetadata::_internal_service_tcp_size() const {
  return service_tcp_.size();
}
inline int ServiceMetadata::service_tcp_size() const {
  return _internal_service_tcp_size();
}
inline void ServiceMetadata::clear_service_tcp() {
  service_tcp_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::_internal_service_tcp(int index) const {
  return service_tcp_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::service_tcp(int index) const {
  // @@protoc_insertion_point(field_get:pb.ServiceMetadata.service_tcp)
  return _internal_service_tcp(index);
}
inline void ServiceMetadata::set_service_tcp(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_tcp_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ServiceMetadata.service_tcp)
}
inline void ServiceMetadata::_internal_add_service_tcp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_tcp_.Add(value);
}
inline void ServiceMetadata::add_service_tcp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_service_tcp(value);
  // @@protoc_insertion_point(field_add:pb.ServiceMetadata.service_tcp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ServiceMetadata::_internal_service_tcp() const {
  return service_tcp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ServiceMetadata::service_tcp() const {
  // @@protoc_insertion_point(field_list:pb.ServiceMetadata.service_tcp)
  return _internal_service_tcp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ServiceMetadata::_internal_mutable_service_tcp() {
  return &service_tcp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ServiceMetadata::mutable_service_tcp() {
  // @@protoc_insertion_point(field_mutable_list:pb.ServiceMetadata.service_tcp)
  return _internal_mutable_service_tcp();
}

// repeated uint32 service_udp = 6;
inline int ServiceMetadata::_internal_service_udp_size() const {
  return service_udp_.size();
}
inline int ServiceMetadata::service_udp_size() const {
  return _internal_service_udp_size();
}
inline void ServiceMetadata::clear_service_udp() {
  service_udp_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::_internal_service_udp(int index) const {
  return service_udp_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceMetadata::service_udp(int index) const {
  // @@protoc_insertion_point(field_get:pb.ServiceMetadata.service_udp)
  return _internal_service_udp(index);
}
inline void ServiceMetadata::set_service_udp(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_udp_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ServiceMetadata.service_udp)
}
inline void ServiceMetadata::_internal_add_service_udp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_udp_.Add(value);
}
inline void ServiceMetadata::add_service_udp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_service_udp(value);
  // @@protoc_insertion_point(field_add:pb.ServiceMetadata.service_udp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ServiceMetadata::_internal_service_udp() const {
  return service_udp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ServiceMetadata::service_udp() const {
  // @@protoc_insertion_point(field_list:pb.ServiceMetadata.service_udp)
  return _internal_service_udp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ServiceMetadata::_internal_mutable_service_udp() {
  return &service_udp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ServiceMetadata::mutable_service_udp() {
  // @@protoc_insertion_point(field_mutable_list:pb.ServiceMetadata.service_udp)
  return _internal_mutable_service_udp();
}

// string price = 7;
inline void ServiceMetadata::clear_price() {
  price_.ClearToEmpty();
}
inline const std::string& ServiceMetadata::price() const {
  // @@protoc_insertion_point(field_get:pb.ServiceMetadata.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceMetadata::set_price(ArgT0&& arg0, ArgT... args) {
 
 price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.ServiceMetadata.price)
}
inline std::string* ServiceMetadata::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:pb.ServiceMetadata.price)
  return _s;
}
inline const std::string& ServiceMetadata::_internal_price() const {
  return price_.Get();
}
inline void ServiceMetadata::_internal_set_price(const std::string& value) {
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceMetadata::_internal_mutable_price() {
  
  return price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceMetadata::release_price() {
  // @@protoc_insertion_point(field_release:pb.ServiceMetadata.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceMetadata::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.ServiceMetadata.price)
}

// string beneficiary_addr = 8;
inline void ServiceMetadata::clear_beneficiary_addr() {
  beneficiary_addr_.ClearToEmpty();
}
inline const std::string& ServiceMetadata::beneficiary_addr() const {
  // @@protoc_insertion_point(field_get:pb.ServiceMetadata.beneficiary_addr)
  return _internal_beneficiary_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceMetadata::set_beneficiary_addr(ArgT0&& arg0, ArgT... args) {
 
 beneficiary_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.ServiceMetadata.beneficiary_addr)
}
inline std::string* ServiceMetadata::mutable_beneficiary_addr() {
  std::string* _s = _internal_mutable_beneficiary_addr();
  // @@protoc_insertion_point(field_mutable:pb.ServiceMetadata.beneficiary_addr)
  return _s;
}
inline const std::string& ServiceMetadata::_internal_beneficiary_addr() const {
  return beneficiary_addr_.Get();
}
inline void ServiceMetadata::_internal_set_beneficiary_addr(const std::string& value) {
  
  beneficiary_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceMetadata::_internal_mutable_beneficiary_addr() {
  
  return beneficiary_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceMetadata::release_beneficiary_addr() {
  // @@protoc_insertion_point(field_release:pb.ServiceMetadata.beneficiary_addr)
  return beneficiary_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceMetadata::set_allocated_beneficiary_addr(std::string* beneficiary_addr) {
  if (beneficiary_addr != nullptr) {
    
  } else {
    
  }
  beneficiary_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), beneficiary_addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.ServiceMetadata.beneficiary_addr)
}

// -------------------------------------------------------------------

// StreamMetadata

// uint32 service_id = 1;
inline void StreamMetadata::clear_service_id() {
  service_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamMetadata::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamMetadata::service_id() const {
  // @@protoc_insertion_point(field_get:pb.StreamMetadata.service_id)
  return _internal_service_id();
}
inline void StreamMetadata::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  service_id_ = value;
}
inline void StreamMetadata::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:pb.StreamMetadata.service_id)
}

// uint32 port_id = 2;
inline void StreamMetadata::clear_port_id() {
  port_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamMetadata::_internal_port_id() const {
  return port_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamMetadata::port_id() const {
  // @@protoc_insertion_point(field_get:pb.StreamMetadata.port_id)
  return _internal_port_id();
}
inline void StreamMetadata::_internal_set_port_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_id_ = value;
}
inline void StreamMetadata::set_port_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_id(value);
  // @@protoc_insertion_point(field_set:pb.StreamMetadata.port_id)
}

// bool is_payment = 3;
inline void StreamMetadata::clear_is_payment() {
  is_payment_ = false;
}
inline bool StreamMetadata::_internal_is_payment() const {
  return is_payment_;
}
inline bool StreamMetadata::is_payment() const {
  // @@protoc_insertion_point(field_get:pb.StreamMetadata.is_payment)
  return _internal_is_payment();
}
inline void StreamMetadata::_internal_set_is_payment(bool value) {
  
  is_payment_ = value;
}
inline void StreamMetadata::set_is_payment(bool value) {
  _internal_set_is_payment(value);
  // @@protoc_insertion_point(field_set:pb.StreamMetadata.is_payment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::EncryptionAlgo> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EncryptionAlgo>() {
  return ::pb::EncryptionAlgo_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tuna_2eproto
